// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  customer
  staff
}

model Users {
  id         String      @id @default(cuid())
  email      String      @unique
  username   String      @unique
  password   String
  role       Role        @default(customer)
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  Admins     Admins[]
  Staffs     Staffs[]
  Customers  Customers[]

  Transaction Transaction[]
}

model Admins {
  id         String   @id @default(cuid())
  name       String
  user       Users    @relation(fields: [user_id], references: [id])
  user_id    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Staffs {
  id           String   @id @default(cuid())
  name         String
  address      String
  phone_number String
  image        String?
  user_id      String
  user         Users    @relation(fields: [user_id], references: [id])
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}

model Customers {
  id           String   @id @default(cuid())
  name         String
  phone_number String
  user_id      String
  address      String
  user         Users    @relation(fields: [user_id], references: [id])
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  Transaction Transaction[]
}

enum ProductStatus {
  available
  rent
  unavailable
}

model Product {
  id          String        @id @default(cuid())
  name        String
  price       Float
  code        String
  status      ProductStatus @default(available)
  category_id String
  brand_id    String
  image       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  category         ProductCategory   @relation(fields: [category_id], references: [id])
  brand            ProductBrand      @relation(fields: [brand_id], references: [id])
  TransactionItems TransactionItem[]

  @@map("products")
}

model ProductCategory {
  id         String   @id @default(cuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  products Product[]

  @@map("product_categories")
}

model ProductBrand {
  id         String    @id @default(cuid())
  name       String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  products   Product[]

  @@map("product_brands")
}

enum TransactionStatus {
  paid
  on_going
  canceled
  finished
  pending
}

enum PaymentStatus {
  half
  full
}

model Transaction {
  id             String            @id @default(cuid())
  start_date     String
  end_date       String
  customer_id    String
  status         TransactionStatus @default(pending)
  payment_status PaymentStatus     @default(half)
  payment_proof  String?
  totalAmount    Float
  payAmount      Float
  user_id        String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  items TransactionItem[]

  customer Customers @relation(fields: [customer_id], references: [id])
  user     Users     @relation(fields: [user_id], references: [id])

  @@map("transactions")
}

model TransactionItem {
  id             String   @id @default(cuid())
  transaction_id String
  product_id     String
  quantity       Int
  price          Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  transaction Transaction @relation(fields: [transaction_id], references: [id])
  product     Product     @relation(fields: [product_id], references: [id])

  @@map("transaction_items")
}
